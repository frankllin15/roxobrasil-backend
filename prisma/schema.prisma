// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String     @id
  name        String
  description String
  users   User[]
  created_at DateTime @default(now())


}

model Address {
  id          String   @id
  street      String
  complement  String?
  default     Boolean @default(false)
  number      String
  country     String
  state       String
  district String
  code        String
  user_id String
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order Order[]
  created_at DateTime @default(now())

}

model User {
  id         String    @id
  firstName  String
  lastName   String?
  email      String    @unique
  password   String
  phoneNumber String? 
  roles      Role[]
  address    Address[]
  payment_methods Payment[]
  created_at DateTime @default(now())
  cart Cart?
}

model Assets {
  id Int @id @default(autoincrement())
  source String
  width Int?
  height Int?
  variant_id String
  variant Variant @relation(fields: [variant_id], references: [id], onDelete: Cascade)
  mime_type String?
}


model Variant {
  id String @id
  name String
  size String?
  color String?
  SKU String?
  info String?
  assets Assets[]
  product_id String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
  price Float
  quantity Int
  in_stock Boolean?
  order Order[]
  carts Cart[]

}

model Price {
  id Int @id @default(autoincrement())
  max Float
  min Float
  product_id String
  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model Collection {
  id String @id @default(cuid())
  name String
  description String?
  products Product[]
  children Collection[]  @relation("ChildrenParent", references: [id])
  parent  Collection[]  @relation("ChildrenParent", references: [id])
  created_at DateTime @default(now())
}

enum DiscountType {
  PERCENT
  VALUE
}

model Discount {
  id String @id @default(cuid())
  name String
  description String?
  type DiscountType
  products Product[]
  value Float
  created_at DateTime @default(now())
  expires String
}

model Product {
  id String @id
  name String
  descrition String?
  variants Variant[]
  discount Discount[]
  price Price?
  slug String @unique
  collections Collection[]
  created_at DateTime @default(now())
  @@index([slug])
}

model Cart {
  id String @id @default(cuid())
  products Variant[]
  user_id String
  created_at DateTime @default(now())

}

model Order {
  id String @id @default(cuid())
  products Variant[]
  payment_id String
  payment Payment @relation(fields: [payment_id], references: [id], onDelete:SetNull)
  status String
  delivery_address Address @relation(fields: [address_id], references: [id])
  address_id String
  created_at DateTime @default(now())
}
enum PaymentMethod {
  credit
  debit
  payment_slip

}

model Payment {
  id String @id @default(uuid())
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String
  method PaymentMethod
  card_number String?
  security_code String?
  validate DateTime
  order Order[]
}
scalar Date

enum DiscounType {
  PERCENT
  VALUE
}
enum PaymentMethod {
  credit
  debit
  payment_slip

}

type Role {
  id: String
  name: String
  description: String
  Users: [User]
  created_at: Date
}

type Address {
  id: String!
  street: String!
  complement: String
  default: Boolean!
  number: String!
  country: String!
  district: String!
  state: String!
  code: String!
  user_id: String!
  created_at: Date!
}

type User {
  id: String!
  firstName: String!
  lastName: String
  email: String!
  password: String!
  phoneNumber: String
  address: [Address]
  payment_method: Payment
  roles: [Role]
  created_at: Date!

}

type Payment {
  id: String!
  user: User!
  method: PaymentMethod
  card_number: String
  security_code: String
  validate: Date
}

type Order {
  id: String!
  products: [Variant]
  payment: Payment!
  status: String!
  delivery_address: Address!
  created_at: Date

}

type Cart {
  id: String!
  products: [Product]
  user_id: String!
  created_at: Date
}

type Product {
  id: String!
  name: String!
  slug: String!
  descrition: String
  variants: [Variant]
  price: Price
  collections: [Collection]
  discount: [Discount]
  created_at: Date
}

type Variant {
  id: String!
  name: String!
  size: String
  color: String
  info: String
  assets: [Assets]
  SKU: String
  product: Product
  price: Float!
  quantity: Int!
  in_stock: Boolean
}

type Price {
   id: Int!
  max: Float!
  min: Float!
  product: Product
}

type Assets {
  id: Int!
  source: String!
  width: Int
  height: Int
  mime_type: String

}

type Collection {
  id: String!
  name: String!
  description: String
  products: [Product]
  children: [Collection]
  parent: [Collection]
  created_at: Date
}

type Discount {
  id: String!
  name: String!
  description: String
  type: DiscounType!
  products: [Product]
  value: Float!
  created_at: Date!
  expires: Date!
}

input NewUserInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: NewAddress
  phoneNumber: String
  roles: [String]!
}

input NewAddress {
  street: String!
  complement: String
  number: String!
  default: Boolean
  country: String!
  district: String!
  state: String!
  code: String!
}
input NewRole {
  name: String!
  description: String!
}

type Error {
  message: String
  code: String
}

type DefaultResult {
  errors: [Error]
  success: Boolean
}

type CreateRoleResult {
  errors: [Error]
  success: Boolean
  role: Role
}

type RolesResult {
  errors: [Error]
  success: Boolean
  roles: [Role]
}

type RoleResult {
  errors: [Error]
  success: Boolean
  role: Role
}

type UserResult {
  errors: [Error]
  success: Boolean
  user: User
}

type UsersResult {
  errors: [Error]
  success: Boolean
  users: [User]
}

type DeleteResult {
  errors: [Error]
  success: Boolean
}

type LoginResult {
  success: Boolean
  access_token: String
  user: User
}

type CreateUserResult {
  success: Boolean
  errors: [Error]
  access_token: String
  user: User
}

type ProductResult {
  success: Boolean
  errors: [Error]
  item: Product
}

type ProductsResult {
  success: Boolean
  errors: [Error]
  items: [Product]
  total_items: Int
}

type VariantsResult {
  success: Boolean
  errors: [Error]
  variants: [Variant]
} 

type CollectionResult {
  success: Boolean
  errors: [Error]
  collection: Collection
}


type CollectionsResult {
  success: Boolean
  errors: [Error]
  collections: [Collection]
}

type DiscountResult {
  errors: [Error]
  success: Boolean
  discount: Discount
}


type DiscountsResult {
  errors: [Error]
  success: Boolean
  discounts: [Discount]
}

type AddressResult {
  success: Boolean
  errors: [Error]
  address: [Address]
}

type CartResult {
  errors: [Error]
  success: Boolean
  cart: Cart
}
type CartsResult {
  errors: [Error]
  success: Boolean
  carts: [Cart]
}

input DeleteRoleInput {
  id: String!
}

input LoginInput {
  email: String!
  password: String!
}

input VerifyInput {
  token: String
}

input AddRoleInput {
  id: String!
}

input AddRoleUserInput {
  userId: String!
  roles: [AddRoleInput]
}

input DeleteUserInput {
  id: String!
}
input UserInput {
  id: String!
}

input UpdateUserFildsInput {
  firstName: String
  lastName: String
  email: String
  address: NewAddress
}

input UpdateUserInput {
  id: String!
  data: UpdateUserFildsInput
}

input NewProductInput {
  name: String!
  descrition: String
  variants: [NewVariantInput]

}


input NewVariantInput {
  name: String!
  assets: [NewAssetsInput]
  price: Float!
  quantity: Int!
  size: String
  color: String
}

input NewAssetsInput {
  source: String!
  width: Int
  height: Int
  
}

input GetListInput {
  take: Int
}

input GetProductBySlugInput {
  slug: String!
}

input UpdateProductFieldsInput {
  name: String
  descrition: String
  variants: [NewVariantInput]
  collections: [IdInput]
}

input UpdateProductInput {
  id: String!
  data: UpdateProductFieldsInput
}

input UpdateVariantsFielsInput {
  id: String!
  name: String
  assets: [NewAssetsInput]
  price: Float
  quantity: Int
  size: String
  color: String
}

input UpdateVariantsInput {
  product_id: String! 
  variants: [UpdateVariantsFielsInput]
}

input IdInput {
  id: String
}

input IdListInput {
  ids: [String]
}


input NewCollectionInput {
  name: String!
  description: String
  parent: [IdInput]
  children: [IdInput]
}

input NewDiscountInput {
  name: String!
  description: String
  type: DiscounType
  products: [IdInput]
  value: Float!
  expires: Date!
}

input ProductDiscountInput {
  discount_id: String
  products: [IdInput]
}

input NewCart {
  products: [IdInput]
  user_id: String!
}

input UpdateCartFields {
  products: [IdInput]
}
input UpdateCartInput {
  id: String!
  data: UpdateCartFields!
}

type DeleteResult {
  errors: [Error]
  success: Boolean
  count: Int
}

type Query {
  # User
  users: UsersResult!
  user(input: UserInput): UserResult!
  userAddress(input: IdInput): AddressResult!
  userCart(input: IdInput): CartResult!
  # Role
  roles: RolesResult 
  # Product
  products(input: GetListInput): ProductsResult!
  getProductBySlug(input: GetProductBySlugInput): ProductResult!
  # Collections
  collections(input: GetListInput): CollectionsResult!
  collection(input: IdInput):CollectionResult!
  # Discount
  discount(input: IdInput): DiscountResult!
  discounts(input: GetListInput): DiscountsResult!
  # Cart
  cart(input: IdInput): CartResult!
  carts: CartsResult!
}

type Mutation {
  # User
  createUser(input: NewUserInput): CreateUserResult
  updateUser(input: UpdateUserInput): UserResult!
  deleteUser(input: DeleteUserInput): DeleteResult!
  # Address
  deleteAddress(input: IdInput): DefaultResult!
  # Role
  createRole(input: NewRole): CreateRoleResult!
  deleteRole(input: DeleteRoleInput): DeleteResult!
  addRolesUser(input: AddRoleUserInput): DefaultResult!
  # Auth
  login(input: LoginInput): LoginResult
  verify: User
  # Product
  createProduct(input: NewProductInput): ProductResult!
  deleteProduct(input: IdInput): DefaultResult!
  updateProduct(input: UpdateProductInput): ProductResult!
  # Variat
  updateVariants(input: UpdateVariantsInput): VariantsResult!
  deleteVariants(input: IdListInput): DeleteResult!
  # Collections
  createCollection(input: NewCollectionInput): DiscountResult!
  addProductsDiscount(input: ProductDiscountInput): DiscountResult!
  removeProductsDiscount(input: ProductDiscountInput): DiscountResult!
  deleteCollection(input: IdInput): DefaultResult!
  # Discount
  createDiscount(input: NewDiscountInput): DiscountResult!
  # Cart
  createCart(input: NewCart): CartResult!
  updateCart(input: UpdateCartInput): CartResult!
  deleteCart(input: IdInput): DefaultResult!
}

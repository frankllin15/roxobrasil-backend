type Role {
  id: String
  name: String
  description: String
  Users: [User]
  created_at: String
}

type Address {
  id: String!
  street: String!
  complement: String
  default: Boolean!
  number: String!
  country: String!
  state: String!
  code: String!
  user_id: String!
  user: User! 
}

type User {
  id: String!
  firstName: String!
  lastName: String
  email: String!
  password: String!
  roles: [Role]
  address: [Address]
  created_at: String!
}

type Product {
  id: String!
  name: String!
  descrition: String
  variants: [Variant]
  price: Price
}

type Variant {
  id: String!
  name: String!
  assets: [Assets]
  product_id: String!
  product: Product!
  price: Float!
  quantity: Int!
  in_stock: Boolean
}

type Price {
   id: Int!
  max: Float!
  min: Float!
  product: Product
}

type Assets {
  id: Int!
  source: String!
  width: Int
  height: Int
  variant_id: String!
  variant: Variant!
}

input NewUserInput {
  firstName: String!
  lastName: String
  email: String!
  password: String!
  address: NewAddress
  roles: [String]!
}

input NewAddress {
  street: String!
  complement: String
  number: String!
  default: Boolean
  country: String!
  state: String!
  code: String!
}
input NewRole {
  name: String!
  description: String!
}

type Error {
  message: String
  code: String
}

type DefaultResult {
  errors: [Error]
  success: Boolean
}

type CreateRoleResult {
  errors: [Error]
  success: Boolean
  role: Role
}

type RolesResult {
  errors: [Error]
  success: Boolean
  roles: [Role]
}

type RoleResult {
  errors: [Error]
  success: Boolean
  role: Role
}

type UserResult {
  errors: [Error]
  success: Boolean
  user: User
}

type UsersResult {
  errors: [Error]
  success: Boolean
  users: [User]
}

type DeleteResult {
  errors: [Error]
  success: Boolean
}

type LoginResult {
  access_token: String
  user: User
}

type CreateUserResult {
  access_token: String
  user: User
}

type ProductResult {
  success: Boolean
  errors: [Error]
  product: Product
}

type ProductsResult {
  success: Boolean
  errors: [Error]
  products: [Product]
  total_items: Int
}

input DeleteRoleInput {
  id: String!
}

input LoginInput {
  email: String!
  password: String!
}

input VerifyInput {
  token: String
}

input AddRoleInput {
  id: String!
}

input AddRoleUserInput {
  userId: String!
  roles: [AddRoleInput]
}

input DeleteUserInput {
  id: String!
}
input UserInput {
  id: String!
}

input UpdateUserFildsInput {
  firstName: String
  lastName: String
  email: String
  address: NewAddress
}

input UpdateUserInput {
  id: String!
  data: UpdateUserFildsInput
}

input NewProductInput {
  name: String!
  descrition: String
  variants: [NewVariantInput]

}


input NewVariantInput {
  name: String!
  assets: [NewAssetsInput]
  price: Float!
  quantity: Int!
}

input NewAssetsInput {
  source: String!
  width: Int
  height: Int
  
}

input ProductsInput {
  take: Int
}

type Query {
  # User
  users: UsersResult
  user(input: UserInput): UserResult
  # Role
  roles: RolesResult 
  # Product
  products(input: ProductsInput): ProductsResult!
}

type DeleteAllProductsResult {
 count: Int
}

type Mutation {
  # User
  createUser(input: NewUserInput): CreateUserResult
  updateUser(input: UpdateUserInput): UserResult!
  deleteUser(input: DeleteUserInput): DeleteResult!
  # Role
  createRole(input: NewRole): CreateRoleResult!
  deleteRole(input: DeleteRoleInput): DeleteResult!
  addRolesUser(input: AddRoleUserInput): DefaultResult!
  # Auth
  login(input: LoginInput): LoginResult
  verify: User
  # Product
  createProduct(input: NewProductInput): ProductResult!
  deleteAllProducts: DeleteAllProductsResult
}
